#include <pebble.h>
 
#define CIRCLE_RADIUS 7
#define CIRCLE_LINE_THICKNESS 2
#define CIRCLE_PADDING 8 - CIRCLE_RADIUS
#define CELL_SIZE (2 * (CIRCLE_RADIUS + CIRCLE_PADDING))
#define SIDE_PADDING (144 - (4 * CELL_SIZE)) / 2

#define CELLS_PER_ROW 4
#define CELLS_PER_COLUMN 6

#define HOURS_FIRST_DIGIT_ROW 0
#define HOURS_SECOND_DIGIT_ROW 1
#define MINUTES_FIRST_DIGIT_ROW 2
#define MINUTES_SECOND_DIGIT_ROW 3
#define SECONDS_FIRST_DIGIT_ROW 4
#define SECONDS_SECOND_DIGIT_ROW 5

#define DEFAULT_MAX_COLS 4
#define HOURS_FIRST_DIGIT_MAX_COLS 2
#define MINUTES_FIRST_DIGIT_MAX_COLS 3
#define SECONDS_FIRST_DIGIT_MAX_COLS 3 
  
static Window *s_main_window;
static TextLayer *s_time_layer, *s_date_layer;
static BitmapLayer *s_background_layer;
static GBitmap *s_background_bitmap;
static Layer *s_battery_layer;
static int s_battery_level;
static Layer *s_display_layer;

static void battery_callback(BatteryChargeState state) {
  s_battery_level = state.charge_percent;
  layer_mark_dirty(s_battery_layer);}

static void draw_cell(GContext *ctx, GPoint center, bool filled) {
  graphics_context_set_fill_color(ctx, GColorWhite);
  graphics_fill_circle(ctx, center, CIRCLE_RADIUS);
  if (!filled) {
    graphics_context_set_fill_color(ctx, GColorBlack);
    graphics_fill_circle(ctx, center, CIRCLE_RADIUS - CIRCLE_LINE_THICKNESS);}}

static GPoint get_center_point_from_cell_location(unsigned short x, unsigned short y) {
  return GPoint(SIDE_PADDING + (CELL_SIZE / 2) + (CELL_SIZE * x), (CELL_SIZE / 2) + (CELL_SIZE * y));}

static void draw_cell_row_for_digit(GContext *ctx, unsigned short digit, unsigned short max_columns_to_display, unsigned short cell_row) {
  for (int i = 0; i < max_columns_to_display; i++) {
    draw_cell(ctx, get_center_point_from_cell_location(i, cell_row), (digit >> i) & 0x1);}}

static unsigned short get_display_hour(unsigned short hour) {
  if (clock_is_24h_style()) {return hour;}
unsigned short display_hour = hour % 12;
return display_hour ? display_hour : 12;}

static void display_layer_update_callback(Layer *layer, GContext *ctx) {
  time_t now = time(NULL);
  struct tm *t = localtime(&now);
  unsigned short display_hour = get_display_hour(t->tm_hour);
  draw_cell_row_for_digit(ctx, display_hour / 10, HOURS_FIRST_DIGIT_MAX_COLS, HOURS_FIRST_DIGIT_ROW);
  draw_cell_row_for_digit(ctx, display_hour % 10, DEFAULT_MAX_COLS, HOURS_SECOND_DIGIT_ROW);
  draw_cell_row_for_digit(ctx, t->tm_min / 10, MINUTES_FIRST_DIGIT_MAX_COLS, MINUTES_FIRST_DIGIT_ROW);
  draw_cell_row_for_digit(ctx, t->tm_min % 10, DEFAULT_MAX_COLS, MINUTES_SECOND_DIGIT_ROW);
  draw_cell_row_for_digit(ctx, t->tm_sec / 10, SECONDS_FIRST_DIGIT_MAX_COLS, SECONDS_FIRST_DIGIT_ROW);
  draw_cell_row_for_digit(ctx, t->tm_sec % 10, DEFAULT_MAX_COLS, SECONDS_SECOND_DIGIT_ROW);}

static void battery_update_proc(Layer *layer, GContext *ctx) {
  GRect bounds = layer_get_bounds(layer);
  int width = (int)(float)((((float)s_battery_level / 100.0F)/4) * 114.0F);
  graphics_context_set_fill_color(ctx, GColorBlack);
  graphics_fill_rect(ctx, bounds, GCornerNone, 0);
  graphics_context_set_fill_color(ctx, GColorWhite);
  graphics_fill_rect(ctx, GRect(0, 0, width, bounds.size.h), GCornerNone, 0);}

static void handle_second_tick(struct tm* tick_time, TimeUnits units_changed) {
  static char s_time_text[] = "00:00:00";
  static char date_buffer[16];
  strftime(date_buffer, sizeof(date_buffer), "%a %d %b", tick_time);
  strftime(s_time_text, sizeof(s_time_text), "%T", tick_time);
  text_layer_set_text(s_date_layer, date_buffer);
  text_layer_set_text(s_time_layer, s_time_text);}

static void main_window_load(Window *window) {
  Layer *window_layer = window_get_root_layer(window);
  s_background_bitmap = gbitmap_create_with_resource(RESOURCE_ID_IMAGE_BACKGROUND);
  s_background_layer = bitmap_layer_create(GRect(0, 0, 144, 168));
  bitmap_layer_set_bitmap(s_background_layer, s_background_bitmap);
  layer_add_child(window_get_root_layer(window), bitmap_layer_get_layer(s_background_layer));
  
  GRect bounds = layer_get_frame(window_layer);
  s_display_layer = layer_create(bounds);
  layer_set_update_proc(s_display_layer, display_layer_update_callback);
  layer_add_child(window_layer, s_display_layer);
  
  s_battery_layer = layer_create(GRect(7, 160, 30, 2));
  layer_set_update_proc(s_battery_layer, battery_update_proc);
  layer_add_child(window_get_root_layer(window), s_battery_layer);
  
  s_battery_layer = layer_create(GRect(7, 161, 30, 2));
  layer_set_update_proc(s_battery_layer, battery_update_proc);
  layer_add_child(window_get_root_layer(window), s_battery_layer);
  
  s_battery_layer = layer_create(GRect(7, 162, 30, 2));
  layer_set_update_proc(s_battery_layer, battery_update_proc);
  layer_add_child(window_get_root_layer(window), s_battery_layer);
  s_date_layer = text_layer_create(GRect(60, 148, 80, 30));
  
  text_layer_set_text_color(s_date_layer, GColorWhite);
  text_layer_set_background_color(s_date_layer, GColorClear);
  text_layer_set_font(s_date_layer, fonts_get_system_font(FONT_KEY_GOTHIC_18_BOLD));
  text_layer_set_text_alignment(s_date_layer, GTextAlignmentCenter);

  s_time_layer = text_layer_create(GRect(22, 115, 100, 34));
  text_layer_set_text_color(s_time_layer, GColorWhite);
  text_layer_set_background_color(s_time_layer, GColorClear);
  text_layer_set_font(s_time_layer, fonts_get_system_font(FONT_KEY_GOTHIC_28_BOLD));
  text_layer_set_text_alignment(s_time_layer, GTextAlignmentCenter);
  
  layer_add_child(window_get_root_layer(window), text_layer_get_layer(s_date_layer));
  time_t now = time(NULL);
  struct tm *current_time = localtime(&now);
  handle_second_tick(current_time, SECOND_UNIT);
  tick_timer_service_subscribe(SECOND_UNIT, handle_second_tick);
  battery_callback(battery_state_service_peek());
  layer_add_child(window_layer, text_layer_get_layer(s_time_layer));}

static void main_window_unload(Window *window) {
  tick_timer_service_unsubscribe();
  text_layer_destroy(s_date_layer);
  gbitmap_destroy(s_background_bitmap);
  layer_destroy(s_display_layer);
  bitmap_layer_destroy(s_background_layer);
  layer_destroy(s_battery_layer);
  text_layer_destroy(s_time_layer);}                                 
  
static void init() {
  s_main_window = window_create();
  window_set_background_color(s_main_window, GColorBlack);
  window_set_window_handlers(s_main_window, (WindowHandlers) {
    .load = main_window_load,
    .unload = main_window_unload,});
  battery_state_service_subscribe(battery_callback);
  window_stack_push(s_main_window, true);}

static void deinit() {window_destroy(s_main_window);}

int main(void) {init();app_event_loop();deinit();}